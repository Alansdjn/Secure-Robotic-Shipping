File "verifier.pv", line 92, characters 10-11:
Warning: identifier Ns rebound.
File "verifier.pv", line 92, characters 23-28:
Warning: identifier Tqrgen rebound.
File "verifier.pv", line 92, characters 58-61:
Warning: identifier UAID rebound.
File "verifier.pv", line 92, characters 73-74:
Warning: identifier pk rebound.
File "verifier.pv", line 94, characters 9-16:
Warning: identifier secretQR rebound.
File "verifier.pv", line 109, characters 9-10:
Warning: identifier pk rebound.
File "verifier.pv", line 128, characters 13-14:
Warning: identifier sk rebound.
File "verifier.pv", line 128, characters 21-24:
Warning: identifier UAID rebound.
File "verifier.pv", line 146, characters 12-13:
Warning: identifier Ns rebound.
File "verifier.pv", line 146, characters 29-34:
Warning: identifier Tqrgen rebound.
File "verifier.pv", line 146, characters 50-53:
Warning: identifier UAID rebound.
File "verifier.pv", line 146, characters 69-70:
Warning: identifier sk rebound.
File "verifier.pv", line 145, characters 13-15:
Warning: identifier tid rebound.
File "verifier.pv", line 145, characters 31-38:
Warning: identifier secretQR rebound.
Process 0 (that is, the initial process):
(
    {1}!
    {2}new tid_1: bitstring;
    {3}new secretQR_1: bitstring;
    {4}new Nc: bitstring;
    {5}let Nx: bitstring = senc(Nc,K) in
    {6}let v0: bitstring = hash(connect3(Nc,K,tid_1)) in
    {7}event c2s_start;
    {8}out(c_cs, (tid_1,Nx,v0));
    {9}in(c_cs, (X: bitstring,R: bitstring));
    {10}let =R = hash(connect4(X,K,ids,Nc)) in
    {11}event s2c_end;
    {12}let (Ns_1: bitstring,Tqrgen_1: bitstring,tid_new: bitstring,UAID_1: bitstring,pk_1: pkey) = sdec'(X,K) in
    {13}let secretC: bitstring = hash(connect3'(Ns_1,Tqrgen_1,K)) in
    {14}let secretQR_2: bitstring = secretC in
    {15}let secretC_send: bitstring = aenc(secretC,pk_1) in
    {16}event c2r_start;
    {17}out(c_cr, (secretC_send,UAID_1))
) | (
    {18}!
    {19}new Ns_2: bitstring;
    {20}new Tqrgen_2: bitstring;
    {21}new UAID_2: bitstring;
    {22}new sk_1: skey;
    {23}in(c_cs, (tid_check: bitstring,Nx_1: bitstring,v0_1: bitstring));
    {24}if (tid = tid_check) then
    {25}let Nc_1: bitstring = sdec(Nx_1,K) in
    {26}let =v0_1 = hash(connect3(Nc_1,K,tid)) in
    {27}event c2s_end;
    {28}new tid_new_1: bitstring;
    {29}let pk_2: pkey = pk(sk_1) in
    {30}let X_1: bitstring = senc'(Ns_2,Tqrgen_2,tid_new_1,UAID_2,pk_2,K) in
    {31}let R_1: bitstring = hash(connect4(X_1,K,ids,Nc_1)) in
    {32}event s2c_start;
    {33}out(c_cs, (X_1,R_1));
    {34}out(c_r, (sk_1,UAID_2));
    {35}let secretR: bitstring = hash(connect3'(Ns_2,Tqrgen_2,K)) in
    {36}let secretR_send: bitstring = aenc(secretR,pk_2) in
    {37}event s2r_start;
    {38}out(c_rs, secretR_send)
) | (
    {39}!
    {40}in(c_r, (sk_2: skey,UAID_3: bitstring));
    {41}in(c_rs, secretR_send_1: bitstring);
    {42}event s2r_end;
    {43}in(c_cr, (secretC_send_1: bitstring,UAID_check: bitstring));
    {44}if (UAID_3 = UAID_check) then
    {45}event c2r_end;
    {46}let secretR_1: bitstring = adec(secretR_send_1,sk_2) in
    {47}let secretC_1: bitstring = adec(secretC_send_1,sk_2) in
    {48}if (secretC_1 = secretR_1) then
    {49}event match_secret
)

-- Query event(c2s_end) ==> event(c2s_start) in process 0.
Completing...
Starting query event(c2s_end) ==> event(c2s_start)
RESULT event(c2s_end) ==> event(c2s_start) is true.
-- Query inj-event(s2c_end) ==> inj-event(s2c_start) in process 0.
Completing...
Starting query inj-event(s2c_end) ==> inj-event(s2c_start)
RESULT inj-event(s2c_end) ==> inj-event(s2c_start) is true.
-- Query inj-event(s2r_end) ==> inj-event(s2r_start) in process 0.
Completing...
Starting query inj-event(s2r_end) ==> inj-event(s2r_start)
RESULT inj-event(s2r_end) ==> inj-event(s2r_start) is true.
-- Query inj-event(c2r_end) ==> inj-event(c2r_start) in process 0.
Completing...
Starting query inj-event(c2r_end) ==> inj-event(c2r_start)
RESULT inj-event(c2r_end) ==> inj-event(c2r_start) is true.
-- Query inj-event(match_secret) ==> (inj-event(c2r_end) ==> inj-event(s2c_start) && inj-event(c2r_start)) in process 0.
Completing...
Starting query inj-event(match_secret) ==> (inj-event(c2r_end) ==> inj-event(s2c_start) && inj-event(c2r_start))
RESULT inj-event(match_secret) ==> (inj-event(c2r_end) ==> inj-event(s2c_start) && inj-event(c2r_start)) is true.
-- Query not attacker(ids[]) in process 0.
Completing...
Starting query not attacker(ids[])
RESULT not attacker(ids[]) is true.
-- Query not attacker(K[]) in process 0.
Completing...
Starting query not attacker(K[])
RESULT not attacker(K[]) is true.
-- Query not attacker(Ns[]) in process 0.
Completing...
Starting query not attacker(Ns[])
RESULT not attacker(Ns[]) is true.
-- Query not attacker(Tqrgen[]) in process 0.
Completing...
Starting query not attacker(Tqrgen[])
RESULT not attacker(Tqrgen[]) is true.
-- Query not attacker(UAID[]) in process 0.
Completing...
Starting query not attacker(UAID[])
RESULT not attacker(UAID[]) is true.
-- Query not attacker(sk[]) in process 0.
Completing...
Starting query not attacker(sk[])
RESULT not attacker(sk[]) is true.
-- Query not attacker(secretQR[]) in process 0.
Completing...
Starting query not attacker(secretQR[])
RESULT not attacker(secretQR[]) is true.
-- Non-interference sk in process 0.
Completing...
RESULT Non-interference sk is true.
-- Weak secret K in process 0.
Termination warning: v ≠ v_1 && attacker_guess(v_2,v) && attacker_guess(v_2,v_1) -> bad
Selecting 0
Termination warning: v ≠ v_1 && attacker_guess(v,v_2) && attacker_guess(v_1,v_2) -> bad
Selecting 0
Completing...
200 rules inserted. The rule base contains 200 rules. 41 rules in the queue.
Termination warning: v ≠ v_1 && attacker_guess(v_2,v) && attacker_guess(v_2,v_1) -> bad
Selecting 0
Termination warning: v ≠ v_1 && attacker_guess(v,v_2) && attacker_guess(v_1,v_2) -> bad
Selecting 0
Termination warning: v ≠ v_1 && attacker(v) && attacker_guess(v,v_1) -> bad
Selecting 1
Termination warning: v ≠ v_1 && attacker(v) && attacker_guess(v_1,v) -> bad
Selecting 1
goal reachable: bad

Derivation:
Abbreviations:
Nc_2 = Nc[!1 = @sid]
tid_2 = tid_1[!1 = @sid]

1. The attacker has the weak secret K[] in the first component, a guess @weaksecretcst in the second.
attacker_guess(K[],@weaksecretcst).

2. The message (tid_2,senc(Nc_2,K[]),hash(connect3(Nc_2,K[],tid_2))) may be sent to the attacker at output {8}.
attacker((tid_2,senc(Nc_2,K[]),hash(connect3(Nc_2,K[],tid_2)))).

3. By 2, the attacker may know (tid_2,senc(Nc_2,K[]),hash(connect3(Nc_2,K[],tid_2))).
Using the function 2-proj-3-tuple the attacker may obtain senc(Nc_2,K[]).
attacker(senc(Nc_2,K[])).

4. By 3, the attacker may know senc(Nc_2,K[]).
So the attacker may know senc(Nc_2,K[]) (resp. senc(Nc_2,K[])) in off-line phase.
attacker_guess(senc(Nc_2,K[]),senc(Nc_2,K[])).

5. By 4, the attacker may know senc(Nc_2,K[]) (resp. senc(Nc_2,K[])) in off-line phase.
By 1, the attacker may know K[] (resp. @weaksecretcst) in off-line phase.
Using the function sdec the attacker may obtain Nc_2 (resp. fail-any) in off-line phase.
attacker_guess(Nc_2,fail-any).

6. By 5, the attacker may know Nc_2 (resp. fail-any) in off-line phase.
So the attacker may test the failure of this term, which may allow it to distinguish cases.
bad.


A more detailed output of the traces is available with
  set traceDisplay = long.

new tid_1: bitstring creating tid_2 at {2} in copy a

new secretQR_1: bitstring creating secretQR_3 at {3} in copy a

new Nc: bitstring creating Nc_2 at {4} in copy a

event c2s_start at {7} in copy a

out(c_cs, (~M,~M_1,~M_2)) with ~M = tid_2, ~M_1 = senc(Nc_2,K), ~M_2 = hash(connect3(Nc_2,K,tid_2)) at {8} in copy a

The attacker tests whether sdec(~M_1,@weaksecretcst) is fail knowing
~M_1 = senc(Nc_2,K).
This allows the attacker to know whether @weaksecretcst = K.
A trace has been found.
RESULT Weak secret K is false.
-- Weak secret UAID in process 0.
Termination warning: v ≠ v_1 && attacker_guess(v_2,v) && attacker_guess(v_2,v_1) -> bad
Selecting 0
Termination warning: v ≠ v_1 && attacker_guess(v,v_2) && attacker_guess(v_1,v_2) -> bad
Selecting 0
Completing...
200 rules inserted. The rule base contains 200 rules. 41 rules in the queue.
Termination warning: v ≠ v_1 && attacker_guess(v_2,v) && attacker_guess(v_2,v_1) -> bad
Selecting 0
Termination warning: v ≠ v_1 && attacker_guess(v,v_2) && attacker_guess(v_1,v_2) -> bad
Selecting 0
Termination warning: v ≠ v_1 && attacker(v) && attacker_guess(v,v_1) -> bad
Selecting 1
Termination warning: v ≠ v_1 && attacker(v) && attacker_guess(v_1,v) -> bad
Selecting 1
RESULT Weak secret UAID is true.
-- Weak secret sk in process 0.
Termination warning: v ≠ v_1 && attacker_guess(v_2,v) && attacker_guess(v_2,v_1) -> bad
Selecting 0
Termination warning: v ≠ v_1 && attacker_guess(v,v_2) && attacker_guess(v_1,v_2) -> bad
Selecting 0
Completing...
200 rules inserted. The rule base contains 200 rules. 41 rules in the queue.
Termination warning: v ≠ v_1 && attacker_guess(v_2,v) && attacker_guess(v_2,v_1) -> bad
Selecting 0
Termination warning: v ≠ v_1 && attacker_guess(v,v_2) && attacker_guess(v_1,v_2) -> bad
Selecting 0
Termination warning: v ≠ v_1 && attacker(v) && attacker_guess(v,v_1) -> bad
Selecting 1
Termination warning: v ≠ v_1 && attacker(v) && attacker_guess(v_1,v) -> bad
Selecting 1
RESULT Weak secret sk is true.

--------------------------------------------------------------
Verification summary:

Query event(c2s_end) ==> event(c2s_start) is true.

Query inj-event(s2c_end) ==> inj-event(s2c_start) is true.

Query inj-event(s2r_end) ==> inj-event(s2r_start) is true.

Query inj-event(c2r_end) ==> inj-event(c2r_start) is true.

Query inj-event(match_secret) ==> (inj-event(c2r_end) ==> inj-event(s2c_start) && inj-event(c2r_start)) is true.

Query not attacker(ids[]) is true.

Query not attacker(K[]) is true.

Query not attacker(Ns[]) is true.

Query not attacker(Tqrgen[]) is true.

Query not attacker(UAID[]) is true.

Query not attacker(sk[]) is true.

Query not attacker(secretQR[]) is true.

Non-interference sk is true.

Weak secret K is false.

Weak secret UAID is true.

Weak secret sk is true.

--------------------------------------------------------------
